#include <stdio.h>
#include <stdlib.h>

void printArray(int *A, int n)
{
    for (int i = 0; i < n; i++)
    {
        printf("%d ", A[i]);
    }
    printf("\n");
}

int partition(int *A, int l, int h)
{
    int temp1,temp2;
    int low = l;
    int pivot = A[low];
    int j = h;
    int i = low + 1;
   
    do
    {
        while (A[i] <= pivot)
        {
            i++;
        }
        while (A[j] > pivot)
        {
            j--;
        }
        if (i < j)
        {
            temp1 = A[i];
            A[i] = A[j];
            A[j] = temp1;
        }

    } while (i < j); ///------JAB TAK j bada hai

    //---Changes in the pivot values.   j has the value of the index of pivot located
    //temp2 = pivot;
    A[low] = A[j];
    A[j] = pivot;
    return j;
}

void quickSort(int *A, int l, int h)
{
    if (l < h)
    {
        int partitionIndex;
        partitionIndex = partition(A, l, h);//----Getting the index where the pivot is taken.
        //printArray(A,10);----TO CHECK THE ARRAY AFTER EVERY PARTITIONING

        //----Forming sub array to solve  (RECURRSIVE APPROACH)
        quickSort(A, l, partitionIndex - 1);//---Forming the right sub-array
        quickSort(A, partitionIndex + 1, h);//---Forming the left sub-array
    }
}

int main(int argc, char const *argv[])
{
    int arr[] = {11, 2, 43, 9, 24, 54, 8, 7, 5, 6,0,7,5,43,67,87,2,1,13,76};
    int n = 20;
    printArray(arr, n);
    quickSort(arr, 0, n - 1);
    printArray(arr, n);
    /* code */
    return 0;
}
